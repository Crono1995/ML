import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs

# Set the size of the plots
plt.rcParams['figure.figsize'] = (16, 9)

# Generate synthetic data
# X contains the data points, and y contains the labels (not used here)
X, y = make_blobs(n_samples=800, n_features=3, centers=4)

# Display the generated data (optional)
# X gives you a look at the first few data points
print(X[:5])

# Finding the optimal number of clusters using the elbow method
wcss_list = []  # List to store Within-Cluster Sum of Squares (WCSS) for each k

# Loop over different number of clusters from 1 to 10
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)  # Initialize KMeans
    kmeans.fit(X)  # Fit KMeans model to the data
    wcss_list.append(kmeans.inertia_)  # Append the WCSS for the current number of clusters

# Plotting the results
plt.plot(range(1, 11), wcss_list)  # Plot WCSS against the number of clusters
plt.title('Elbow Method for Optimal Number of Clusters')  # Title of the plot
plt.xlabel('Number of clusters')  # X-axis label
plt.ylabel('WCSS')  # Y-axis label
plt.show()  # Display the plot
